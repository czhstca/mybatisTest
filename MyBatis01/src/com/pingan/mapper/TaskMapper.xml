<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
注意：使用Mapper代理开发时，namespace应该等于Mapper接口全路径!
-->
<mapper namespace="com.pingan.mapper.TaskMapper">
	
	<!-- 开启本Mapper的namespace下的二级缓存 -->
	<cache></cache>
	
	<!-- 通过select执行数据库查询 id：表示映射文件中的sql，也称为Statement的id -->
	<!-- 将来sql语句都会封装到mappedStatement中 -->
	<!-- parameterType:输入参数类型 :基本类型、HashMap、POJO、包装后的POJO-->
	<!-- taskname表示接收输入参数的名称为taskname,如果参数类型为简单类型，参数名称可以任意英文 -->
	<!-- resultType:指定sql输出结果映射的java对象,select指定resultType表示将单条记录映射成的Pojo对象,这里的Task为别名 -->
	<!-- 如果resultType作为输出映射，只有查询出的列名和POJO中属性名一致，该列才能映射成功! -->
	<!-- 如果查询出列名和POJO属性名全都不一致，不会创建POJO对象 -->
	<!-- 只要查询出列名只要有一个和POJO属性名一样，就会创建POJO对象,其余属性全为空 -->
	<!-- resultType可以为简单类型(结果只有一列时)，字符串，POJO，List<POJO> -->
	<!-- useCache:是否使用二级缓存(针对每次查询都都需最新的数据的情况) -->
	<!-- flushCache:清空（刷新）缓存 (一般都设置为true，避免脏读) -->
	<select id="findTaskByTaskName" parameterType="string" resultType="task" useCache="false" flushCache="true">
		SELECT * FROM BATCHTASK_STATUS WHERE TASKNAME=#{taskname}
	</select>
	
	<!-- 查询返回多条结果的sql -->
	<!-- ${}表示拼接sql串，将接收到的参数不加任何修饰拼接在sql中,但注意，这个容易引起sql注入! -->
	<!-- 接收输入参数的内容，如果传入的为简单类型，${}中只能写value -->
	<select id="findTaskByTaskNamelike" parameterType="java.lang.String" resultType="com.pingan.pojo.Task">
		SELECT * FROM BATCHTASK_STATUS WHERE TASKNAME LIKE '%${value}%'
	</select>

	<!-- 添加一条task记录 -->
	<!-- 此时的输入参数是pojo,mybatis也是通过ognl获取对象的属性值 -->
	<insert id="insertTask" parameterType="com.pingan.pojo.Task">
		INSERT INTO BATCHTASK_STATUS(INPUTDATE,TARGETNAME,TASKNAME) VALUES (#{inputdate},#{targetname},#{taskname})
	</insert>

	 <!-- 更新TASK -->
	 <!-- ParameterType应该为pojo,且更新的task的name值必须存在，否则会把所有记录全部进行更新 -->
	 <update id="updateTask" parameterType="com.pingan.pojo.Task">
	 	UPDATE BATCHTASK_STATUS SET TARGETNAME = #{targetname}  WHERE TASKNAME = #{taskname}
	 </update>
	 
	 <!-- 删除TASK -->
	 <delete id="deleteTask" parameterType="java.lang.String">
	 	DELETE FROM BATCHTASK_STATUS WHERE TASKNAME = #{taskname}
	 </delete>
	 
	 <!-- sql片段 -->
	 <!-- 提高可重用性，一般基于单表定义 -->
	 <!-- 在sql片段中不要包含where，使引用更加灵活 -->
	 <sql id="query_task_where">
 		<if test="taskCustom!=null">
 			<if test="taskCustom.targetname!=null and taskCustom.targetname!=''">
 				and targetname = #{taskCustom.targetname}
 			</if>
 			<if test="taskCustom.taskname!=null and taskCustom.taskname!=''">
 				and taskname  LIKE '%${taskCustom.taskname}%'
 			</if>
 			<if test="tasknameList != null">
 				<!-- 使用foreach遍历list -->
 				<!-- collection:指定输入sql中的集合名称 -->
 				<!-- item:每次遍历生成的对象名 -->
 				<!-- open:开始遍历时拼接的串 -->
 				<!-- close:结束遍历时拼接的串 -->
 				<!-- separator:遍历的两个对象中间需要拼接的串 -->
 				
 				<!-- 实现   and (taskname='' Or taskname = '' Or taskname= '') -->
 				<!-- <foreach collection="tasknameList" item="task_name" open="and (" close=")" separator="or">
 					每次遍历需要拼接的串
 					taskname = #{task_name}
 				</foreach> -->
 				
 				<!-- 实现  and taskname in ('','','') -->
 				<foreach collection="tasknameList" item="task_name" open="and taskname in(" close=")" separator=",">
 					<!-- 每次遍历需要拼接的串 -->
 					#{task_name}
 				</foreach>
 			</if>
 		</if>
	 </sql>
	 
	 <!-- Task信息综合查询 -->
	 <!-- 通过对象导航方式获取pojo包装类的属性条件 -->
	 <select id="findTaskList" parameterType="com.pingan.vo.TaskVo" resultType="com.pingan.pojo.TaskCustom">
	 	select * from batchtask_status 
 	
	 	<!-- 动态sql条件拼接 -->
	 	<where>
	 		<!-- 引用sql id 如果sql id不再这个mapper中，前缀需要加namespace-->
	 		<include refid="query_task_where"></include>
	 		<!-- 复杂查询在这里还要引用其他sql id -->
	 	</where>
	 </select>
	 
	 <!-- batchtask_status表符合条件记录数(resultType为简单类型)-->
	 <select id="findTaskCount" parameterType="com.pingan.vo.TaskVo" resultType="int">
	 	select count(*) from batchtask_status 
	 	
	 	<!-- 动态sql条件拼接 -->
	 	<where>
			<!-- 引用sql id -->
	 		<include refid="query_task_where"></include>
	 	</where>
	 </select>
	 
	 
	 <!-- 定义resultMap -->
	 <!-- 将 select targetname target_, taskname task_ 和Task中的属性作映射-->
	 <!-- type:resultType最终映射的对象 TASK -->
	 <!-- id:对resultMap的唯一标识 -->
	 <resultMap type="com.pingan.pojo.Task" id="taskResultMap">
		<!-- id表示查询结果集中唯一标识 -->
		<!-- column:查询出的列名 -->
		<!-- property:POJO中对应属性名 -->
		<!-- <id column="task_" property="taskname"/> -->
		<!-- result表示对普通列的定义 -->
		<result column="task_" property="taskname"/>
	 </resultMap>
	 
	 <!-- resultType查询出的列名和POJO属性值不一致，可以通过定义一个resultMap对列名和属性名之间做映射! -->
	 <!-- 1.定义resultMap -->
	 <!-- 2.使用resultMap作为statement的输出映射类型 -->
	 <!-- 注意如果定义的resultMap在其他文件中，前面要加namespace -->
	 <select id="findTaskByTaskNameResultMap" parameterType="java.lang.String" resultMap="taskResultMap">
	 	select taskname task_ from batchtask_status where taskname=#{taskname}
	 </select>
	 
	 
</mapper>